############################################# \
######## USER CONFIG OVERRIDES FILE #########  + --> This will help you personalize my config to your printer :)
############################################# /

# This file is yours! Feel free to edit it in order to include all the needed
# things to adapt my generic config to your machine. This file will not be erased
# when updating the config using moonraker and it will be kept as you've set it.
# You can change every section of the config. You can also add some new custom macros, etc...
# The corresponding documentation can be found in: docs > overrides.md

### Also, keep in mind: if you use a multi-MCU config such as the old school double SKRs or a CANbus toolhead
### board, you will need to specify which components are connected to which board in your own mcu.cfg file!
### Example: if something is connected to the toolhead MCU, you should use "config_pin: toolhead:PIN_NAME".

#> Main control MCUs are called "mcu" (and "secondary" when using a double MCU configuration)
#> Toolhead CANboard MCUs are called "toolhead"
#> MMU/ERCF MCUs are called "mmu" 


## Filametrix X :10-4
## Filametrix Y :320
#-------------------------------------------------------------------------------------------
[input_shaper]
# Supported shapers: zv, mzv, zvd, ei, 2hump_ei, 3hump_ei
shaper_freq_x: 67.2
shaper_type_x: mzv
shaper_freq_y: 37.8
shaper_type_y: mzv


# ------------------------------------------------------------------------------------------


#-------------------------#
#   START_PRINT SEQUENCE  #
#-------------------------#

## The START_PRINT sequence is modular and fully customizable. A default START_PRINT sequence is auto-populated based on
## your probe choice (TAP, Dockable, Inductive), but if for some reasons you still want to modify it, please uncomment the following 3
## lines to define a new `variable_startprint_actions`. You can use any number of action or even duplicate some actions if needed.
## Available actions: "bed_soak", "extruder_preheating", "chamber_soak", "extruder_heating", "tilt_calib", "z_offset", "bedmesh", "purge", "clean", "primeline"
##
[gcode_macro _USER_VARIABLES]
variable_startprint_actions: "tilt_calib", "z_offset", "bedmesh", "extruder_heating", "clean", "primeline", 
gcode: # do not remove this line


#-------------------------#
#   EXTRUDER/BED PIDs     #
#-------------------------#

## Here is an example of some overrides for the PIDs. I put them here as almost everyone will use them,
## so just uncomment the following lines and change the values according to your own machine

[heater_bed]
max_temp: 130
control: pid
pid_kp: 359.707
pid_ki: 3.402
pid_kd: 261.962

[extruder]
control: pid
pid_kp: 45.531
pid_ki: 5.837
pid_kd: 88.788

step_pin: H36_combo:PB9 
dir_pin: !H36_combo:PB8
enable_pin: !H36_combo:PB7
rotation_distance: 47.088   # Galileo 2 G2E
gear_ratio: 9:1    #for Galileo 2 G2E Gear Ratio
microsteps: 16
full_steps_per_rotation: 200    #200 for 1.8 degree, 400 for 0.9 degree
nozzle_diameter: 0.400
filament_diameter: 1.75
heater_pin: H36_combo: PA7 
pullup_resistor: 2200
## Check what thermistor type you have. See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types.
## Use "Generic 3950" for NTC 100k 3950 thermistors
sensor_type: ATC Semitec 104GT-2  #Generic 3950
sensor_pin: H36_combo:PA6  
#min_temp: 175
#max_temp: 300 #360 
#max_power: 1.0
##  Try to keep pressure_advance below 1.0
#pressure_advance: 0.02 #0.05
##  Default is 0.040, leave stock
#pressure_advance_smooth_time: 0.040
max_extrude_cross_section: 5000.0

[tmc2209 extruder]
uart_pin: H36_combo:PC14
interpolate: false
run_current: 0.6
sense_resistor: 0.110
stealthchop_threshold: 0
#diag_pin: H36_combo:PC15

[printer]
kinematics: corexy
max_velocity: 350
max_accel: 10000
max_z_velocity: 50
max_z_accel: 20  #500
# minimum_cruise_ratio: 0.5 # This left commented to not break older Klipper versions
square_corner_velocity: 5.0
#####################################################################
#   X/Y Stepper Settings
#####################################################################
[stepper_x]
step_pin: X_STEP
dir_pin: !X_DIR
enable_pin: !X_ENABLE
endstop_pin: H36_combo:PA8
microsteps: 64  #16
rotation_distance: 40
full_steps_per_rotation: 200
homing_retract_dist: 0
position_min: 0
position_max: 355
position_endstop: 355
homing_speed: 60  #30

[tmc2130 stepper_x]
interpolate: False
run_current: 1.0  # 0.95
cs_pin: X_TMCUART
spi_speed: 500000
spi_software_sclk_pin: DRIVER_SPI_SCK
spi_software_mosi_pin: DRIVER_SPI_MOSI
spi_software_miso_pin: DRIVER_SPI_MISO
sense_resistor: 0.110


[stepper_y]
step_pin: Y_STEP
dir_pin: !Y_DIR
enable_pin: !Y_ENABLE
endstop_pin: Y_STOP  #H36_combo:PA8
microsteps: 64  #128
# dir_pin: !Y_DIR
rotation_distance: 40
full_steps_per_rotation: 200
homing_retract_dist: 0
position_min: 5
position_max: 360
position_endstop: 360
homing_speed: 60  #30

[tmc2130 stepper_y]
cs_pin: Y_TMCUART
cs_pin: Y_TMCUART
spi_software_sclk_pin: DRIVER_SPI_SCK
spi_software_mosi_pin: DRIVER_SPI_MOSI
spi_software_miso_pin: DRIVER_SPI_MISO
interpolate: False
run_current: 1.0  # 0.95
sense_resistor: 0.110

#-------------------------#
#   Z MOTORS DIRECTION    #
#-------------------------#

## Here is an example of some overrides for the motor directions as it's a pretty common one. If you need
## to invert the Z1 or Z3 motor direction on your machine, just uncomment the following lines.
# [stepper_z1]
# dir_pin: !Z1_DIR

# [stepper_z3]
# dir_pin: !Z3_DIR

#####################################################################
#   Z Stepper Settings
#####################################################################
[stepper_z]
step_pin: Z_STEP
dir_pin: !Z_DIR
enable_pin: !Z_ENABLE
rotation_distance: 40
gear_ratio: 80:16
full_steps_per_rotation: 200
microsteps: 128
endstop_pin: probe:z_virtual_endstop # uses cartographer as virtual endstop
homing_retract_dist: 0 # cartographer needs this to be set to 0
#position_endstop: 5 # cartographer needs this to be commented out
homing_speed: 30  #20  #15
second_homing_speed: 8
position_max: 310
position_min: -5

[tmc2130 stepper_z]
cs_pin: Z_TMCUART
spi_speed: 500000
spi_software_sclk_pin: DRIVER_SPI_SCK
spi_software_mosi_pin: DRIVER_SPI_MOSI
spi_software_miso_pin: DRIVER_SPI_MISO
run_current: .875
interpolate: False                  # Включать интерполяцию 256 микрошагов (True включено, False выключено)
sense_resistor: 0.110

[stepper_z1]
step_pin: Z1_STEP
dir_pin: Z1_DIR
enable_pin: !Z1_ENABLE
rotation_distance: 40
gear_ratio: 80:16
full_steps_per_rotation: 200
microsteps: 128
endstop_pin: probe:z_virtual_endstop

[tmc2130 stepper_z1]
cs_pin: Z1_TMCUART
spi_speed: 500000
spi_software_sclk_pin: DRIVER_SPI_SCK
spi_software_mosi_pin: DRIVER_SPI_MOSI
spi_software_miso_pin: DRIVER_SPI_MISO
run_current: .875
interpolate: False                  # Включать интерполяцию 256 микрошагов (True включено, False выключено)
sense_resistor: 0.110

[stepper_z2]
step_pin: Z2_STEP
dir_pin: !Z2_DIR
enable_pin: !Z2_ENABLE
rotation_distance: 40
gear_ratio: 80:16
full_steps_per_rotation: 200
microsteps: 128
endstop_pin: probe:z_virtual_endstop

[tmc2130 stepper_z2]
cs_pin: Z2_TMCUART
spi_speed: 500000
spi_software_sclk_pin: DRIVER_SPI_SCK
spi_software_mosi_pin: DRIVER_SPI_MOSI
spi_software_miso_pin: DRIVER_SPI_MISO
run_current: .875
interpolate: False                  # Включать интерполяцию 256 микрошагов (True включено, False выключено)
sense_resistor: 0.110

[stepper_z3]
step_pin: Z3_STEP
dir_pin: Z3_DIR
enable_pin: !Z3_ENABLE
rotation_distance: 40
gear_ratio: 80:16
full_steps_per_rotation: 200
microsteps: 128
endstop_pin: probe:z_virtual_endstop

[tmc2130 stepper_z3]
cs_pin: Z3_TMCUART
spi_speed: 500000
spi_software_sclk_pin: DRIVER_SPI_SCK
spi_software_mosi_pin: DRIVER_SPI_MOSI
spi_software_miso_pin: DRIVER_SPI_MISO
run_current: .875
interpolate: False                  # Включать интерполяцию 256 микрошагов (True включено, False выключено)
sense_resistor: 0.110


#-------------------------#
#   Probe Offsets         #
#-------------------------#

## Here is an example of some overrides for bed probes. These frequently have calibrated offsets for xyz,
## and many will need them during setup. If you need to set these, just uncomment the following lines.
# [probe]
# x_offset: -1.85
# y_offset: 29.3
# z_offset: 12.6

[controller_fan controller_fan]
pin: CONTROLLER_FAN
max_power: 1.0  #0.6
#kick_start_time: 0.5
fan_speed: 1.0  #0.9
idle_timeout: 90
heater: extruder
stepper: stepper_x, stepper_y, stepper_z, stepper_z1, stepper_z2, stepper_z3

[heater_fan hotend_fan]
pin: H36_combo:PA9  # FAN0
max_power: 1.0
kick_start_time: 0.100
fan_speed: 1.0  # 0.75
heater: extruder
heater_temp: 50.0

[fan]
pin: H36_combo:PB15  # FAN1
kick_start_time: 0.100
cycle_time: 0.010

#[output_pin daylight]
#pin: LIGHT_OUTPUT
#pwm: True
#cycle_time: 0.01

[neopixel status_leds]
pin: H36_combo:PA10 #IO.3/RGB0
## color_order: GRB, GRB, GRB, GRB, GRB, GRB, GRB, GRB, GRBW, GRBW

[bed_mesh]
speed: 350
horizontal_move_z: 5
#    height of scanner during bed mesh scan
# mesh_min: 35, 6
mesh_min: 25, 25
#    start point of bed mesh [X, Y]
# mesh_max: 240, 198
mesh_max: 325, 325
#    end point of bed mesh [X, Y]
probe_count: 30, 30
algorithm: bicubic


[mcu scanner]
canbus_uuid: 16e83a34639b 
#serial: /dev/serial/by-id/usb-cartographer_cartographer_
#    adjust to suit your scanner, if using usb change to serial

[scanner]
mcu: scanner            
#   Offsets are measured from the centre of your coil, to the tip of your nozzle 
#   on a level axis. It is vital that this is accurate. 
x_offset: 0                          
#    adjust for your cartographers offset from nozzle to middle of coil
y_offset: 15                         
#    adjust for your cartographers offset from nozzle to middle of coil
backlash_comp: 0.5
#   Backlash compensation distance for removing Z backlash before measuring
#   the sensor response.
sensor: cartographer
#    this must be set as cartographer unless using IDM etc.
sensor_alt: carto
#    alternate name to call commands. CARTO_TOUCH etc      
mesh_runs: 2
#    Number of passes to make during mesh scan.

[temperature_sensor Cartographer_MCU]
sensor_type: temperature_mcu
sensor_mcu: scanner
min_temp: 0
max_temp: 105

[shaketune]
result_folder: ~/printer_data/config/ShakeTune_results
#    Path where the processed results will be stored. If the folder doesn't exist,
#    it will be automatically created. You can change this if you'd like to store 
#    results in a different location.
number_of_results_to_keep: 10
#    This setting defines how many results you want to keep in the result folder.
#    Once the specified number is exceeded, older results will be automatically deleted
#    to free up space on the SD card and avoid cluttering the results folder.
keep_raw_data: False
#    If set to True, Shake&Tune will store both the processed graphs and the raw accelerometer
#    .stdata files in the results folder. This can be useful for debugging or archiving purposes.
#    Please always attach them when reporting any issues on GitHub or Discord.
show_macros_in_webui: True
#    Mainsail and Fluidd doesn't create buttons for system commands (macros that are not part
#    of the printer.cfg file). This option allow Shake&Tune to inject them into the webui at runtime.
#    If set to False, the macros will be hidden but still accessible from the console by typing
#    their names manually, which can be useful if you prefer to encapsulate them into your own macros.
timeout: 600
#    This defines the maximum processing time (in seconds) to allows to Shake&Tune for generating 
#    graphs from a .stdata file. 10 minutes should be more than enough in most cases, but if you have
#    slower hardware (e.g., older SD cards or low-performance devices), increase it to prevent timeouts.
measurements_chunk_size: 2
#    Each Shake&Tune command uses the accelerometer to take multiple measurements. By default,
#    Shake&Tune will write a chunk of data to disk every two measurements, and at the end of the
#    command will merge these chunks into the final .stdata file for processing. "2" is a very
#    conservative setting to avoid Klipper Timer Too Close errors on lower end devices with little
#    RAM, and should work for everyone. However, if you are using a powerful computer, you may
#    wish to increase this value to keep more measurements in memory (e.g., 15-20) before writing
#    the chunk and avoid stressing the filesystem too much.
max_freq: 200
#    This setting defines the maximum frequency at which the calculation of the power spectral density
#    is cutoff. The default value should be fine for most machines and accelerometer combinations and
#    avoid touching it unless you know what you're doing.
dpi: 300
#    Controls the resolution of the generated graphs. The default value of 300 dpi was optimized
#    and strikes a balance between performance and readability, ensuring that graphs are clear
#    without using too much RAM to generate them. Usually, you shouldn't need to change this value.


# [safe_z_home]
# home_xy_position: 175,175
# z_hop: 10


[adxl345]
cs_pin: H36_combo:PB12
spi_software_sclk_pin: H36_combo:PB10
spi_software_mosi_pin: H36_combo:PB11
spi_software_miso_pin: H36_combo:PB2
axes_map: -y,z,-x

[resonance_tester]
accel_chip: adxl345
probe_points:
    175,175,50 # an example

   


    